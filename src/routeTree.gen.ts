/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/__root'
import { Route as PublicRouteRouteImport } from './app/_public/route'
import { Route as ProtectedRouteRouteImport } from './app/_protected/route'
import { Route as PublicIndexRouteImport } from './app/_public/index'
import { Route as ProtectedSettingsIndexRouteImport } from './app/_protected/settings/index'
import { Route as ProtectedDashboardIndexRouteImport } from './app/_protected/dashboard/index'
import { Route as ProtectedInviteInvitationIdIndexRouteImport } from './app/_protected/invite/$invitationId/index'
import { Route as ProtectedDashboardConnectionConnectionIdIndexRouteImport } from './app/_protected/dashboard/connection/$connectionId/index'

const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const ProtectedSettingsIndexRoute = ProtectedSettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedDashboardIndexRoute = ProtectedDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedInviteInvitationIdIndexRoute =
  ProtectedInviteInvitationIdIndexRouteImport.update({
    id: '/invite/$invitationId/',
    path: '/invite/$invitationId/',
    getParentRoute: () => ProtectedRouteRoute,
  } as any)
const ProtectedDashboardConnectionConnectionIdIndexRoute =
  ProtectedDashboardConnectionConnectionIdIndexRouteImport.update({
    id: '/dashboard/connection/$connectionId/',
    path: '/dashboard/connection/$connectionId/',
    getParentRoute: () => ProtectedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof PublicIndexRoute
  '/dashboard': typeof ProtectedDashboardIndexRoute
  '/settings': typeof ProtectedSettingsIndexRoute
  '/invite/$invitationId': typeof ProtectedInviteInvitationIdIndexRoute
  '/dashboard/connection/$connectionId': typeof ProtectedDashboardConnectionConnectionIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof PublicIndexRoute
  '/dashboard': typeof ProtectedDashboardIndexRoute
  '/settings': typeof ProtectedSettingsIndexRoute
  '/invite/$invitationId': typeof ProtectedInviteInvitationIdIndexRoute
  '/dashboard/connection/$connectionId': typeof ProtectedDashboardConnectionConnectionIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_public': typeof PublicRouteRouteWithChildren
  '/_public/': typeof PublicIndexRoute
  '/_protected/dashboard/': typeof ProtectedDashboardIndexRoute
  '/_protected/settings/': typeof ProtectedSettingsIndexRoute
  '/_protected/invite/$invitationId/': typeof ProtectedInviteInvitationIdIndexRoute
  '/_protected/dashboard/connection/$connectionId/': typeof ProtectedDashboardConnectionConnectionIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/settings'
    | '/invite/$invitationId'
    | '/dashboard/connection/$connectionId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/settings'
    | '/invite/$invitationId'
    | '/dashboard/connection/$connectionId'
  id:
    | '__root__'
    | '/_protected'
    | '/_public'
    | '/_public/'
    | '/_protected/dashboard/'
    | '/_protected/settings/'
    | '/_protected/invite/$invitationId/'
    | '/_protected/dashboard/connection/$connectionId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_protected/settings/': {
      id: '/_protected/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/dashboard/': {
      id: '/_protected/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/invite/$invitationId/': {
      id: '/_protected/invite/$invitationId/'
      path: '/invite/$invitationId'
      fullPath: '/invite/$invitationId'
      preLoaderRoute: typeof ProtectedInviteInvitationIdIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/dashboard/connection/$connectionId/': {
      id: '/_protected/dashboard/connection/$connectionId/'
      path: '/dashboard/connection/$connectionId'
      fullPath: '/dashboard/connection/$connectionId'
      preLoaderRoute: typeof ProtectedDashboardConnectionConnectionIdIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
  }
}

interface ProtectedRouteRouteChildren {
  ProtectedDashboardIndexRoute: typeof ProtectedDashboardIndexRoute
  ProtectedSettingsIndexRoute: typeof ProtectedSettingsIndexRoute
  ProtectedInviteInvitationIdIndexRoute: typeof ProtectedInviteInvitationIdIndexRoute
  ProtectedDashboardConnectionConnectionIdIndexRoute: typeof ProtectedDashboardConnectionConnectionIdIndexRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedDashboardIndexRoute: ProtectedDashboardIndexRoute,
  ProtectedSettingsIndexRoute: ProtectedSettingsIndexRoute,
  ProtectedInviteInvitationIdIndexRoute: ProtectedInviteInvitationIdIndexRoute,
  ProtectedDashboardConnectionConnectionIdIndexRoute:
    ProtectedDashboardConnectionConnectionIdIndexRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

interface PublicRouteRouteChildren {
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  PublicRouteRoute: PublicRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
